grammar Lisp
  rule program do
    (comment / cell)* <Program>
  end

  # comments start with '#' and end at the end of a line, as in ruby
  rule comment do
    ";" (![\n] .)* [\n]? <Comment>
  end
  
  rule cell do
    space* (list / atom / quoted_list) space* <Cell>
  end
  
  rule list do
    "(" cell* ")" <List>
  end
  
  rule quoted_list do
    "'(" cell* ")" <QuotedList>
  end
  
  rule atom do
    datum / identifier
  end
  
  rule datum do
    boolean / integer / float / string
  end
  
  rule boolean do
    ("#t" / "#f") <Boolean>
  end
  
  rule integer do
    ("-"? "0" / "-"? [1-9] [0-9]*) <Integer>
  end

  rule float do
    ("-"? [0-9]* "." [0-9]*) <Float>
  end

  rule string do
    '"' string_val:(string_char)* '"' <LispString>
  end
 
  rule string_char do
    !'"' char:(.) {
      def value
        self.char.text_value
      end
    }
  end
  
  rule identifier do
    (!delimiter .)+ <Identifier>
  end
  
  rule space do
    [\s\n\r\t]
  end
  
  rule paren do
    [\(\)\[\]]
  end
  
  rule delimiter do
    paren / space
  end
end

