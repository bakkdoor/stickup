(let ((numbers '(1 2 3 4)))
  (print "OK")
  (pp (cons 10 numbers))
  (pp (append '(10 20 30 40) numbers))
  (pp (drop 2 numbers))
  (pp (take 2 numbers)) 
  (if (any? (lambda (x) (> x 2)) numbers)
      (print "there are some greater than 2!")
      (print "there are none greater than 2!")))

(print (rest '(100 200 300 a)))

(let ((numbers (upto 0 20)))
  (print "numbers are:")
  (pp numbers)
  (print "take 5:")
  (pp (take 5 numbers))
  (print "drop 8:")
  (pp (drop 8 numbers))
  (print "only even:")
  (pp (filter even? numbers))
  (print "only odd:")
  (pp (filter odd? numbers))
  (print "split-at 5")
  (pp (split-at 5 numbers))
  (print "reverse:")
  (pp (reverse numbers))
  (print "amount of even numbers: ")
  (pp (count even? numbers)))

(let ((seq1 (upto 1 10))
      (seq2 (upto 11 20))
      (seq3 (upto 21 30)))
  (print "pairwise:")
  (pp (pairwise seq1 seq2))
  (print "zipped (3 seqs):")
  (pp (zip '(seq1 seq2 seq3))))

(let ((seq '((upto 0 5) (upto 6 10) (upto 11 15) (upto 16 20))))
  (print "unzipping:")
  (pp seq)
  (print "unzip1:")
  (pp (unzip1 seq))
  (print "unzip2:")
  (pp (unzip2 seq))  
  (print "unzip3:")
  (pp (unzip3 seq))
  (print "unzip4:")
  (pp (unzip4 seq))
  (print "unzip5:")
  (pp (unzip5 seq)))

(let ((seq '(1 2 3 4 5)))
  (for-each (lambda (x)
              (progn
               (print- (string-concat '("number: " (string x))))
               (if (even? x)
                   (print " (even)")
                   (print " (not even)"))))
            seq))